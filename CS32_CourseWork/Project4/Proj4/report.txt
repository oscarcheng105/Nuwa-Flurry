Oscar (Kai-Chen) Cheng
305 375 558

1.
My chatTracker is majorly constructed with two hash tables (vector<list<User>>, vector<list<User>>), one for the user and another for the chat. Both the chat and user hash table stores the chat/user information using the index generated by the hash function from #include <functional>, and uses a list to address collision. There are two struct, User and Chat. User contains the name, currentChat, currentCount (represent user's contribution to the current chat), a vector of counts to keep track of user to each chat's contribution, and a pointer vector of Chat to keep count of the relative relationship between the User and its associated chats.(ex. Chat has a vector of User to trace the existing users in the chat, vice versa). Chat contains the name, count (represent to total contribution in the chat), and a pointer vector of User to keep count of the relative relationship between the Chat and its associated existing users.
I used the hash tables to get quicker accessing time, so that the algorithm does not have to run through a list long of users/chat every time to keep track of each user or chat's condition, which helps me reduce a significant amount time. 

2.
void ChatTrackerImpl::join(string user, string chat)
{
Create the userIndex and chatIndex generated through calculated hash function and load factor
Create an iterator for both User and Chat to trace the accorded position of the param user and chat based on the userIndex and chatIndex
generate a boolean for both chat and user that sees if the chat/user passed in by parameter has already existed in hash table or not
generate a boolean for both chat and user to see if the vector of struct (ex. vector<Chat*>, vector<User*>) in User and Chat contains the passed in user or chat. (Ex. struct User, for example, needs to check if its vector<Chat*> contains the chat that is passed in by parameter, vice versa.)

loop through chat hash table to see if param chat exist
add param chat to hash table if it does not exist 

loop through user hash table to see if param user exist
add param user to hash table if it does not exist

loop through chat's associated users to see if chat contains the param user
add param user to chat's associated users if param user doesn't exist

loop through user's associated chats to see if user contains the param chat
	if user's associated chats contains the param chat but is not the user's current chat, 
	move the param chat's position in the associated chats to the back so it becomes the latest chat (also update the position of the chat's count in vector<int> m_count in accordance).
add param chat to user's associated chats and new contribution count if param chat doesn't exist

change the user's current chat to param chat
change the user's current count to param chat's count.
}

int ChatTrackerImpl::terminate(string chat)
{
Create the chatIndex generated through calculated hash function and load vector
Create an iterator for Chat to trace the accorded position of the param chat based on the chat Index
generate a boolean for chat to see if chat passed in by parameter exist in hash table.

loop through chat hash table to see if param chat exist
if chat exist
	loop through chat's associated users
		loop through each user's associated chats
			find the param chat in these associated chats
				erase the chat and its count
				if the user's current chat is the same as param chat
					if the size of the user's associated chats is zero
						set user's current chat to empty and current count to 0
					otherwise set user's current chat and current count to its latest chat.
				break to avoid from searching other chat, no need to further search since target chat is terminated.
	erase the param chat from the hash table
return the total count of the chat
}

int ChatTrackerImpl::contribute(string user)
{
Create the userIndex generated through calculated hash function and load vector
Create an iterator for User to trace the accorded position of the param user based on the userIndex
generate a boolean for user to see if user passed in by parameter exist in hash table.

loop through chat hash table to see if param chat exist
if user exist
	if the user's current chat is not empty
		loop through user's associated chats
			find the chat that is the user's current chat
				update the total count of the chat
				update the user's current count
				return the user's current count
return 0
}

int ChatTrackerImpl::leave(string user, string chat)
{
Create the chatIndex generated through calculated hash function and load vector
Create an iterator for Chat to trace the accorded position of the param chat based on the chat Index
generate a boolean for chat to see if chat passed in by parameter exist in hash table.
    
loop through chat hash table to see if param chat exist
if chat exist
	loop through the chat's associated users
		find the param user in the chat's associated users
			loop through the user's associated chats
				find the param chat in the user's associated chats 
					if the param chat is the user's current chat
						erase the chat and user's count of the chat
						if the user has no associated chats
							set user's currentChat and currentCount to empty and 0
						otherwise set user's currentChat and currentCount to that of the latest chat.
					otherwise erase the chat and user's count of the chat
					break since chat has been deleted from the target user
			break since user has been deleted from the target chat
return contribution to chat from the user
}

int ChatTrackerImpl::leave(string user)
{
Create the userIndex generated through calculated hash function and load vector
Create an iterator for User to trace the accorded position of the param user based on the userIndex
generate a boolean for user to see if user passed in by parameter exist in hash table.

loop through chat hash table to see if param chat exist
if user exist
	if user's current chat is not empty
		loop through the user's associated chats
			find the user's currentChat
				erase user's currentChat and currentCount
				if the user's associated chats are not empty
					set the user's currentChat and currentCount to that of the latest chat
				otherwise set user's currentChat and currentCount to empty and 0
				break since the param user has left its most recent chat
return the user's count of contribution to its most recent chat.
} 

3.
An inefficiency I find in my program is that once a User is associated to many chats, it will take some time for my program to loop through the user's associated chats to find the position of the target chat since the associated chats is constructed by a vector and I wouldn't know the index of the target chat, this is the same with my Chat when it's finding the user in the chat's associated user vector.
